{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","catch","err","console","log","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAoCeA,EAjCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAezC,OACE,mCACE,sBAAMC,SAVW,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAMd,SACE,uBACEO,KAAK,OACLC,YAAY,kBACZC,MAAOV,EACPW,SAnBkB,SAACR,GACzBF,EAAcE,EAAES,OAAOF,e,+BCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXjB,kBAgBdM,GAhBc,4CAAH,sDCYLO,EAVK,SAAC,GAAwB,IAAtBH,EAAqB,EAArBA,MAAWV,GAAU,EAAdS,GAAc,EAAVT,KAChC,OACE,sBAAKc,UAAU,OAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,IACJ,2BCaSO,EAhBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDN,SAACA,GAAc,IAAD,EACdf,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAiBxC,OAXAC,qBAAU,WACRxB,EAAQC,GACLwB,MAAK,SAACC,GAAD,OACJH,EAAS,CACPf,KAAMkB,EACNL,SAAS,OAGZM,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,QAC7B,CAAC3B,IAEGqB,EDf2BS,CAAa9B,GAAjCa,EADkB,EACxBN,KAAca,EADU,EACVA,QAEtB,OACE,qCACE,6BAAKpB,IACJoB,GAAW,mBAAGJ,UAAU,8CAAb,yBACZ,qBAAKA,UAAU,8CAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEajBoB,EAtBM,WAAO,IAAD,EACW9C,mBAAS,CAAC,cADrB,mBAClB+C,EADkB,KACNhD,EADM,KAQzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACGgD,EAAWvB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCPTiC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.e325a364.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('')\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if (inputValue.trim().length > 2) {\n      setCategories((cats) => [inputValue, ...cats])\n      setInputValue('')\n    }\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Escribe aqui...\"\n          value={inputValue}\n          onChange={handleInputChange}\n        />\n      </form>\n    </>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n}\n\nexport default AddCategory\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=5tlho8knqWnI44AigGr0Allj7vsURpHb`\n  const resp = await fetch(url)\n  const { data } = await resp.json()\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    }\n  })\n  // setImages(gifs)\n\n  return gifs\n}\n","import React from 'react'\n\nconst GifGridItem = ({ title, id, url }) => {\n  return (\n    <div className='card'>\n      <img src={url} alt={title} />\n      <p>{title}</p>\n      <hr />\n    </div>\n  )\n}\n\nexport default GifGridItem\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport GifGridItem from './GifGridItem'\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category)\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading && <p className=\"card-grid animate__animated animate__fadeIn\">Cargando...</p>}\n      <div className=\"card-grid animate__animated animate__fadeIn\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  )\n}\n\nexport default GifGrid\n","import { useEffect, useState } from 'react'\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  })\n\n  useEffect(() => {\n    getGifs(category)\n      .then((imgs) =>\n        setState({\n          data: imgs,\n          loading: false,\n        })\n      )\n      .catch((err) => console.log(err))\n  }, [category])\n\n  return state\n}\n","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory'\nimport GifGrid from './components/GifGrid'\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState(['One Punch'])\n\n  // const handleAdd = () => {\n  //     // setCategories([...categories, 'Metal Slug'])\n  //     setCategories(cats => [...cats, 'Metal Slug'])\n  // }\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  )\n}\n\nexport default GifExpertApp\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}